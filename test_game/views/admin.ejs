<!DOCTYPE html>
<html ng-app="test_game">
    <head>
        <title><%=locals.appName%></title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
        <link rel="stylesheet" href="/bootstrap-3.2.0/css/bootstrap.min.css">
        <link rel="stylesheet" href="/bootstrap-treeview/bootstrap-treeview.min.css">
        <link rel="stylesheet" href="/zTree/css/zTreeStyle/zTreeStyle.css" type="text/css">

        <!-- 提前引入,防止FOUC -->
        <script src="/javascripts/angular.min.js"></script>
        <!-- 引入的脚本 -->
        <script src="/javascripts/jquery-1.11.1.min.js"></script>
        <script type="text/javascript" src="/zTree/js/jquery.ztree.core-3.5.js"></script>
        <script type="text/javascript" src="/zTree/js/jquery.ztree.exedit-3.5.min.js"></script>
        <script src="/bootstrap-3.2.0/js/bootstrap.min.js"></script>
        <script src="/bootstrap-treeview/bootstrap-treeview.min.js"></script>
        <script src="/ui-bootstrap-0.11.0/ui-bootstrap-tpls-0.11.0.js"></script>
        <script src="/javascripts/angular-route.min.js"></script>
        <style>
            .ztree li {
                line-height: 18px;
                padding: 3px;
            }

            .ztree li a, .ztree li span, .ztree li input {
                display: inline-block !important;
                font-size: 14px !important;
                font-family: '微软雅黑' !important;
                line-height: 18px !important;
            }

            .ztree li a.curSelectedNode {
                background: #808080;
                border:  none !important;
                border-radius: 0 !important;
                color: #fff;
            }

            .ztree .button.add {
                background-position: -145px 0;
            }

        </style>
    </head>
    <body ng-controller="main_controller">
        <div class="container" style="margin-top:10px;">
            <div ng-view></div>
        </div>
</body>
<script type="text/javascript">

    var app = angular.module('test_game', ['ngRoute', 'ui.bootstrap']);
    app.config(['$routeProvider', function($routeProvider) {
        $routeProvider.when('/settings', {
            templateUrl : '/admin/settings',
            controller  : 'main_controller'
        })
        .when('/importusers', {
            templateUrl : '/admin/importusers',
            controller  : 'main_controller'
        })
        .when('/importquestions', {
            templateUrl : '/admin/importquestions',
            controller  : 'main_controller'
        })
        .when('/report', {
            templateUrl : '/admin/report',
            controller : 'main_controller'
        })
        .otherwise({
            redirectTo : '/settings'
        });
    }])
    .controller('main_controller', ['$scope', '$http', function($scope, $http) {
        var tree;
        var newCount = 1;
        function addHoverDom(treeId, treeNode) {
            var sObj = $("#" + treeNode.tId + "_span");
            if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
            var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
                    + "' title='add node' onfocus='this.blur();'></span>";
            sObj.after(addStr);
            var btn = $("#addBtn_"+treeNode.tId);
            if (btn) btn.bind("click", function(){
                $.get('/admin/addNode?pid=' + treeNode._id, {
                }, function (res) {
                    if(treeNode.open){
                        tree.addNodes(treeNode, {_id: res._id, isParent: true, pId:treeNode.id, title:res.title});
                    } else {
                        tree.expandNode(treeNode, true);
                    }
                });
                return false;
            });
        };

        function removeHoverDom(treeId, treeNode) {
            $("#addBtn_"+treeNode.tId).unbind().remove();
        };

        function zTreeOnAsyncSuccess(e, treeId, treeNode, msg){
            if(msg.length === 1 && msg[0].pid === '0'){ //表示是根节点
                //tree.expandNode(tree.getNodes()[0]);
            }
        }

        function zTreeOnRemove(e, treeId, treeNode){
            $.get('/admin/removeNode?_id=' + treeNode._id, {
            }, function (res) {

            });
        }

        function zTreeOnRename(e, treeId, treeNode){
            $.get('/admin/rename', {
                _id: treeNode._id,
                title: treeNode.title
            }, function (res) {

            });
        }

        //获取题目树形结构
        !function () {
            var setting = {
                view: {
                    addHoverDom: addHoverDom,
                    removeHoverDom: removeHoverDom,
                    selectedMulti: false
                },
                edit: {
                    enable: true,
                    editNameSelectAll: true,
                    showRemoveBtn: function (treeId, treeNode) {
                        if(treeNode.pid === '0'){
                            return false;
                        }
                        return true;
                    },
                    showRenameBtn: true
                },
                async: {
                    enable: true,
                    type: 'POST',
                    dataType : 'json',
                    url:'/question/category',
                    autoParam:['_id']
                },
                data: {
                    key: {
                        name: 'title'
                    },
                    simpleData: {
                        idKey: '_id',
                        pIdKey: 'pid'
                    }
                },
                callback: {
                    onAsyncSuccess: zTreeOnAsyncSuccess,
                    onRemove: zTreeOnRemove,
                    onRename: zTreeOnRename
                }
            };
            tree = $.fn.zTree.init($("#questioncategory"), setting);
        }();

        var contrlScope = $scope;

        var oQuestionForm = $('#question_form');
        oQuestionForm.submit(function () {
            var selectedNode = tree.getSelectedNodes();
            if(!selectedNode.length){
                alert('请先选择组织结构');
                return false;
            } else {
                oQuestionForm.find('input[name="qcid"]').val(selectedNode[0]._id);
            }
            var oTitle = oQuestionForm.find('input[name="title"]');
            if(!oTitle.val()){
                alert('请填写题目集名称');
                return false;
            }
            var oDrillScore= oQuestionForm.find('input[name="drillScore"]');
            if(!oDrillScore.val()){
                alert('请填写练习积分');
                return false;
            }
            var oBattleScore = oQuestionForm.find('input[name="battleScore"]');
            if(!oBattleScore.val()){
                alert('请填写挑战积分');
                return false;
            }

            var oFile = oQuestionForm.find('input[type="file"]');
            if(!oFile.val()){
                alert('请先选择要上传的题目集');
                return false;
            }

            return true;
        });
    }]);
</script>
</html>
